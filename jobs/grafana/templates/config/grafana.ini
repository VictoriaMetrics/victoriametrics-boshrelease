##################### Grafana Configuration Example #####################
#
# Everything has defaults so you only need to uncomment things you want to
# change

<% if_p('grafana.app_mode') do |app_mode| %>
# possible values : production, development
app_mode = <%= app_mode %>
<% end %>

#################################### Paths ####################################
[paths]
# Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)
data = /var/vcap/store/grafana

<% if_p('grafana.paths.temp_data_lifetime') do |temp_data_lifetime| %>
# Temporary files in `data` directory older than given duration will be removed
temp_data_lifetime = <%= temp_data_lifetime %>
<% end %>

# Directory where grafana can store logs
logs = /var/vcap/sys/log/grafana

# Directory where grafana will automatically scan and look for plugins
plugins = /var/vcap/packages/grafana_plugins

# folder that contains provisioning config files that grafana will apply on startup and while running.
provisioning = /var/vcap/jobs/grafana/config/provisioning

#################################### Server ####################################
[server]
<% if_p('grafana.server.protocol') do |protocol| %>
# Protocol (http or https)
protocol = <%= protocol %>
<% end %>

<% if_p('grafana.server.http_addr') do |http_addr| %>
# The ip address to bind to, empty will bind to all interfaces
http_addr = <%= http_addr %>
<% end %>

# The http port to use
http_port = <%= p('grafana.server.http_port') %>

<% if_p('grafana.server.domain') do |domain| %>
# The public facing domain name used to access grafana from a browser
domain = <%= domain %>
<% end %>

<% if_p('grafana.server.enforce_domain') do |enforce_domain| %>
# Redirect to correct domain if host header does not match domain
# Prevents DNS rebinding attacks
enforce_domain = <%= enforce_domain %>
<% end %>

<% if_p('grafana.server.root_url') do |root_url| %>
# The full public facing url
root_url = <%= root_url %>
<% end %>

<% if_p('grafana.server.serve_from_sub_path') do |serve_from_sub_path| %>
# Serve Grafana from subpath specified in `root_url` setting. By default it is set to `false` for compatibility reasons.
serve_from_sub_path = <%= serve_from_sub_path %>
<% end %>

<% if_p('grafana.server.router_logging') do |router_logging| %>
# Log web requests
router_logging = <%= router_logging %>
<% end %>

<% if_p('grafana.server.static_root_path') do |static_root_path| %>
# the path relative working path
static_root_path = <%= static_root_path %>
<% end %>

<% if_p('grafana.server.enable_gzip') do |enable_gzip| %>
# enable gzip
enable_gzip = <%= enable_gzip %>
<% end %>

<% if_p('grafana.server.ssl_cert', 'grafana.server.ssl_key') do %>
# https certs & key file
cert_file = /var/vcap/jobs/grafana/config/ssl_cert.pem
cert_key = /var/vcap/jobs/grafana/config/ssl_key.pem
<% end %>

# Unix socket path
socket = /var/vcap/sys/run/grafana/grafana.sock

#################################### Database ####################################
[database]
# Either "mysql", "postgres" or "sqlite3", it's your choice
type = <%= p('grafana.database.type') %>

<% if p('grafana.database.type') == "sqlite3" %>
# For "sqlite3" only, path relative to data_path setting
path = /var/vcap/store/grafana/grafana.db

<% if_p('grafana.database.cache_mode') do |cache_mode| %>
# For "sqlite3" only. cache mode setting used for connecting to the database
cache_mode = <%= cache_mode %>
<% end %>
<% elsif p('grafana.database.type') == "mysql" || p('grafana.database.type') == "postgres" %>
<%
  database_host = nil
  if_p('grafana.database.host') do |host|
    database_host = host
  end.else do
    database_host = link('database').instances.first.address
  end
%>
# Only applicable to MySQL or Postgres. Includes IP or hostname and port.
host = <%= "#{database_host}:#{p('grafana.database.port')}" %>

# The name of the Grafana database
name = <%= p('grafana.database.name') %>

# The database user
user = <%= p('grafana.database.user') %>

# The database userâ€™s password
password = <%= p('grafana.database.password') %>

<% if_p('grafana.database.max_idle_conn') do |max_idle_conn| %>
# The maximum number of connections in the idle connection pool.
max_idle_conn = <%= max_idle_conn %>
<% end %>

<% if_p('grafana.database.max_open_conn') do |max_open_conn| %>
# The maximum number of open connections to the database.
max_open_conn = <%= max_open_conn %>
<% end %>

<% if_p('grafana.database.conn_max_lifetime') do |conn_max_lifetime| %>
# Connection Max Lifetime default is 14400 (means 14400 seconds or 4 hours)
conn_max_lifetime = <%= conn_max_lifetime %>
<% end %>

<% if_p('grafana.database.ssl_mode') do |ssl_mode| %>
# For Postgres, use either disable, require or verify-full. For MySQL, use either true, false, or skip-verify
ssl_mode = <%= ssl_mode %>
<% end %>

<% if_p('grafana.database.tls_client_cert', 'grafana.database.tls_client_key') do %>
# The path to the client cert. Only if server requires client authentication.
client_cert_path = /var/vcap/jobs/grafana/config/database_tls_client_cert.pem

# The path to the client key. Only if server requires client authentication.
client_key_path = /var/vcap/jobs/grafana/config/database_tls_client_key.pem

<% if_p('grafana.database.tls_client_ca') do %>
# The path to the CA certificate to use
ca_cert_path = /var/vcap/jobs/grafana/config/database_tls_client_ca.pem
<% end %>

<% if_p('grafana.database.server_cert_name') do |server_cert_name| %>
# (MySQL only) The common name field of the certificate used by the mysql server. Not necessary if ssl_mode is set to skip-verify.
server_cert_name = <%= server_cert_name %>
<% end %>
<% end %>
<% else raise "Database type #{p('grafana.database.type')} not supported" %>
<% end %>

# Set to true to log the sql calls and execution times.
<% if_p('grafana.database.log_queries') do |log_queries| %>
log_queries = <%= log_queries %>
<% end %>

#################################### Cache server #############################
[remote_cache]
# Either "redis", "memcached" or "database" default is "database"
type = <%= p('grafana.remote_cache.type') %>

# cache connectionstring options
<% if p('grafana.remote_cache.type') == "database" %>
# database: will use Grafana primary database.
<% elsif p('grafana.remote_cache.type') == "redis" || p('grafana.remote_cache.type') == "memcached" %>
# redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=grafana`
# memcache: 127.0.0.1:11211
connstr = <%= p('grafana.remote_cache.connstr') %>
<% else raise "Remote cache type #{p('grafana.remote_cache.type')} not supported" %>
<% end %>

#################################### Data proxy ###########################
[dataproxy]

<% if_p('grafana.dataproxy.logging_enabled') do |logging_enabled| %>
# This enables data proxy logging, default is false
logging = <%= logging_enabled %>
<% end %>

<% if_p('grafana.dataproxy.timeout') do |timeout| %>
# How long the data proxy should wait before timing out default is 30 (seconds)
timeout = <%= timeout %>
<% end %>

<% if_p('grafana.dataproxy.keep_alive_seconds') do |keep_alive_seconds| %>
# How many seconds the data proxy waits before sending a keepalive request.
keep_alive_seconds = <%= keep_alive_seconds %>
<% end %>

<% if_p('grafana.dataproxy.tls_handshake_timeout_seconds') do |tls_handshake_timeout_seconds| %>
# How many seconds the data proxy waits for a successful TLS Handshake before timing out.
tls_handshake_timeout_seconds = <%= tls_handshake_timeout_seconds %>
<% end %>

<% if_p('grafana.dataproxy.expect_continue_timeout_seconds') do |expect_continue_timeout_seconds| %>
# How many seconds the data proxy will wait for a server's first response headers after
# fully writing the request headers if the request has an "Expect: 100-continue"
# header. A value of 0 will result in the body being sent immediately, without
# waiting for the server to approve.
expect_continue_timeout_seconds = <%= expect_continue_timeout_seconds %>
<% end %>

<% if_p('grafana.dataproxy.max_idle_connections') do |max_idle_connections| %>
# The maximum number of idle connections that Grafana will keep alive.
max_idle_connections = <%= max_idle_connections %>
<% end %>

<% if_p('grafana.dataproxy.idle_conn_timeout_seconds') do |idle_conn_timeout_seconds| %>
# How many seconds the data proxy keeps an idle connection open before timing out.
idle_conn_timeout_seconds = <%= idle_conn_timeout_seconds %>
<% end %>

<% if_p('grafana.dataproxy.send_user_header') do |send_user_header| %>
# If enabled and user is not anonymous, data proxy will add X-Grafana-User header with username into the request, default is false.
send_user_header = <%= send_user_header %>
<% end %>

#################################### Analytics ####################################
[analytics]
<% if_p('grafana.analytics.reporting_enabled') do |reporting_enabled| %>
# Server reporting, sends usage counters to stats.grafana.org every 24 hours.
# No ip addresses are being tracked, only simple counters to track
# running instances, dashboard and error counts. It is very helpful to us.
# Change this option to false to disable reporting.
reporting_enabled = <%= reporting_enabled %>
<% end %>

<% if_p('grafana.analytics.check_for_updates') do |check_for_updates| %>
# Set to false to disable all checks to https://grafana.net
# for new vesions (grafana itself and plugins), check is used
# in some UI views to notify that grafana or plugin update exists
# This option does not cause any auto updates, nor send any information
# only a GET request to http://grafana.net to get latest versions
check_for_updates = <%= check_for_updates %>
<% end %>

<% if_p('grafana.analytics.google_analytics_ua_id') do |google_analytics_ua_id| %>
# Google Analytics universal tracking code, only enabled if you specify an id here
google_analytics_ua_id = <%= google_analytics_ua_id %>
<% end %>

<% if_p('grafana.analytics.google_tag_manager_id') do |google_tag_manager_id| %>
# Google Tag Manager ID, only enabled if you specify an id here
google_tag_manager_id = <%= google_tag_manager_id %>
<% end %>

#################################### Security ####################################
[security]
<% if_p('grafana.security.disable_initial_admin_creation') do |disable_initial_admin_creation| %>
# disable creation of admin user on first start of grafana
disable_initial_admin_creation = <%= disable_initial_admin_creation %>
<% end %>

# default admin user, created on startup
admin_user = <%= p('grafana.security.admin_user') %>

# default admin password, can be changed before first start of grafana, or in profile settings
admin_password = <%= p('grafana.security.admin_password') %>

<% if_p('grafana.security.secret_key') do |secret_key| %>
# used for signing
secret_key = <%= secret_key %>
<% end %>

<% if_p('grafana.security.disable_gravatar') do |disable_gravatar| %>
# disable gravatar profile images
disable_gravatar = <%= disable_gravatar %>
<% end %>

<% if_p('grafana.security.data_source_proxy_whitelist') do |data_source_proxy_whitelist| %>
# data source proxy whitelist (ip_or_domain:port separated by spaces)
data_source_proxy_whitelist = <%= data_source_proxy_whitelist %>
<% end %>

<% if_p('grafana.security.disable_brute_force_login_protection') do |disable_brute_force_login_protection| %>
# disable protection against brute force login attempts
disable_brute_force_login_protection = <%= disable_brute_force_login_protection %>
<% end %>

<% if_p('grafana.security.cookie_secure') do |cookie_secure| %>
# set to true if you host Grafana behind HTTPS. default is false.
cookie_secure = <%= cookie_secure %>
<% end %>

<% if_p('grafana.security.cookie_samesite') do |cookie_samesite| %>
# set cookie SameSite attribute. defaults to `lax`. can be set to "lax", "strict" and "none"
cookie_samesite = <%= cookie_samesite %>
<% end %>

<% if_p('grafana.security.allow_embedding') do |allow_embedding| %>
# set to true if you want to allow browsers to render Grafana in a <frame>, <iframe>, <embed> or <object>. default is false.
allow_embedding = <%= allow_embedding %>
<% end %>

<% if_p('grafana.security.strict_transport_security') do |strict_transport_security| %>
# Set to true if you want to enable http strict transport security (HSTS) response header.
# This is only sent when HTTPS is enabled in this configuration.
# HSTS tells browsers that the site should only be accessed using HTTPS.
# The default will change to true in the next minor release, 6.3.
strict_transport_security = <%= strict_transport_security %>
<% end %>

<% if_p('grafana.security.cstrict_transport_security_max_age_seconds') do |strict_transport_security_max_age_seconds| %>
# Sets how long a browser should cache HSTS. Only applied if strict_transport_security is enabled.
strict_transport_security_max_age_seconds = <%= strict_transport_security_max_age_seconds %>
<% end %>

<% if_p('grafana.security.strict_transport_security_preload') do |strict_transport_security_preload| %>
# Set to true if to enable HSTS preloading option. Only applied if strict_transport_security is enabled.
strict_transport_security_preload = <%= strict_transport_security_preload %>
<% end %>

<% if_p('grafana.security.strict_transport_security_subdomains') do |strict_transport_security_subdomains| %>
# Set to true if to enable the HSTS includeSubDomains option. Only applied if strict_transport_security is enabled.
strict_transport_security_subdomains = <%= strict_transport_security_subdomains %>
<% end %>

<% if_p('grafana.security.x_content_type_options') do |x_content_type_options| %>
# Set to true to enable the X-Content-Type-Options response header.
# The X-Content-Type-Options response HTTP header is a marker used by the server to indicate that the MIME types advertised
# in the Content-Type headers should not be changed and be followed. The default will change to true in the next minor release, 6.3.
x_content_type_options = <%= x_content_type_options %>
<% end %>

<% if_p('grafana.security.x_xss_protection') do |x_xss_protection| %>
# Set to true to enable the X-XSS-Protection header, which tells browsers to stop pages from loading
# when they detect reflected cross-site scripting (XSS) attacks. The default will change to true in the next minor release, 6.3.
x_xss_protection = <%= x_xss_protection %>
<% end %>

#################################### Snapshots ###########################
[snapshots]
<% if_p('grafana.snapshots.external_enabled', 'grafana.snapshots.external_snapshot_url', 'grafana.snapshots.external_snapshot_name') do |external_enabled, external_snapshot_url, external_snapshot_name| %>
# snapshot sharing options
external_enabled = <%= external_enabled %>
external_snapshot_url = <%= external_snapshot_url %>
external_snapshot_name = <%= external_snapshot_name %>
<% end %>

<% if_p('grafana.snapshots.public_mode') do |public_mode| %>
# Set to true to enable this Grafana instance act as an external snapshot server and allow unauthenticated requests for
# creating and deleting snapshots.
public_mode = <%= public_mode %>
<% end %>

<% if_p('grafana.snapshots.remove_expired') do |remove_expired| %>
# remove expired snapshot
snapshot_remove_expired = <%= remove_expired %>
<% end %>

#################################### Dashboards ##################
[dashboards]
<% if_p('grafana.dashboards.versions_to_keep') do |versions_to_keep| %>
# Number dashboard versions to keep (per dashboard). Default: 20, Minimum: 1
versions_to_keep = <%= versions_to_keep %>
<% end %>

<% if_p('grafana.dashboards.min_refresh_interval') do |min_refresh_interval| %>
# Minimum dashboard refresh interval. When set, this will restrict users to set the refresh interval of a dashboard lower than given interval. Per default this is 5 seconds.
# The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
min_refresh_interval = <%= min_refresh_interval %>
<% end %>

#################################### Users ####################################
[users]
<% if_p('grafana.users.allow_sign_up') do |allow_sign_up| %>
# disable user signup / registration
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.users.allow_org_create') do |allow_org_create| %>
# Allow non admin users to create organizations
allow_org_create = <%= allow_org_create %>
<% end %>

<% if_p('grafana.users.auto_assign_org') do |auto_assign_org| %>
# Set to true to automatically assign new users to the default organization (id 1)
auto_assign_org = <%= auto_assign_org %>
<% end %>

<% if_p('grafana.users.auto_assign_org_id') do |auto_assign_org_id| %>
# Set this value to automatically add new users to the provided organization (if auto_assign_org above is set to true)
auto_assign_org_id = <%= auto_assign_org_id %>
<% end %>

<% if_p('grafana.users.auto_assign_org_role') do |auto_assign_org_role| %>
# Default role new users will be automatically assigned (if disabled above is set to true)
auto_assign_org_role = <%= auto_assign_org_role %>
<% end %>

<% if_p('grafana.users.verify_email_enabled') do |verify_email_enabled| %>
# Require email validation before sign up completes
verify_email_enabled = <%= verify_email_enabled %>
<% end %>

<% if_p('grafana.users.login_hint') do |login_hint| %>
# Background text for the user field on the login page
login_hint = <%= login_hint %>
<% end %>

<% if_p('grafana.users.password_hint') do |password_hint| %>
# Background text for the password field on the login page
password_hint = <%= password_hint %>
<% end %>

<% if_p('grafana.users.default_theme') do |default_theme| %>
# Default UI theme ("dark" or "light")
default_theme = <%= default_theme %>
<% end %>

# External user management
<% if_p('grafana.users.external_manage_link_url') do |external_manage_link_url| %>
external_manage_link_url = <%= external_manage_link_url %>
<% end %>
<% if_p('grafana.users.external_manage_link_name') do |external_manage_link_name| %>
external_manage_link_name = <%= external_manage_link_name %>
<% end %>
<% if_p('grafana.users.external_manage_info') do |external_manage_info| %>
external_manage_info = <%= external_manage_info %>
<% end %>

<% if_p('grafana.users.viewers_can_edit') do |viewers_can_edit| %>
# Viewers can edit/inspect dashboard settings in the browser. But not save the dashboard.
viewers_can_edit = <%= viewers_can_edit %>
<% end %>

<% if_p('grafana.users.editors_can_admin') do |editors_can_admin| %>
# Editors can administrate dashboard, folders and teams they create
editors_can_admin = <%= editors_can_admin %>
<% end %>

[auth]
<% if_p('grafana.auth.login_cookie_name') do |login_cookie_name| %>
# Login cookie name
login_cookie_name = <%= login_cookie_name %>
<% end %>

<% if_p('grafana.auth.login_maximum_inactive_lifetime_duration') do |login_maximum_inactive_lifetime_duration| %>
# The maximum lifetime (duration) an authenticated user can be inactive before being required to login at next visit. Default is 7 days (7d). This setting should be expressed as a duration, e.g. 5m (minutes), 6h (hours), 10d (days), 2w (weeks), 1M (month). The lifetime resets at each successful token rotation (token_rotation_interval_minutes).
login_maximum_inactive_lifetime_duration = <%= login_maximum_inactive_lifetime_duration %>
<% end %>

<% if_p('grafana.auth.login_maximum_lifetime_duration') do |login_maximum_lifetime_duration| %>
# The maximum lifetime (duration) an authenticated user can be logged in since login time before being required to login. Default is 30 days (30d). This setting should be expressed as a duration, e.g. 5m (minutes), 6h (hours), 10d (days), 2w (weeks), 1M (month).
login_maximum_lifetime_duration = <%= login_maximum_lifetime_duration %>
<% end %>

<% if_p('grafana.auth.token_rotation_interval_minutes') do |token_rotation_interval_minutes| %>
# How often should auth tokens be rotated for authenticated users when being active. The default is each 10 minutes.
token_rotation_interval_minutes = <%= token_rotation_interval_minutes %>
<% end %>

<% if_p('grafana.auth.disable_login_form') do |disable_login_form| %>
# Set to true to disable (hide) the login form, useful if you use OAuth, defaults to false
disable_login_form = <%= disable_login_form %>
<% end %>

<% if_p('grafana.auth.disable_signout_menu') do |disable_signout_menu| %>
# Set to true to disable the signout link in the side menu. useful if you use auth.proxy
disable_signout_menu = <%= disable_signout_menu %>
<% end %>

<% if_p('grafana.auth.signout_redirect_url') do |signout_redirect_url| %>
# URL to redirect the user to after sign out
signout_redirect_url = <%= signout_redirect_url %>
<% end %>

<% if_p('grafana.auth.oauth_auto_login') do |oauth_auto_login| %>
# Set to true to attempt login with OAuth automatically, skipping the login screen.
# This setting is ignored if multiple OAuth providers are configured.
oauth_auto_login = <%= oauth_auto_login %>
<% end %>

<% if_p('grafana.auth.oauth_state_cookie_max_age') do |oauth_state_cookie_max_age| %>
# OAuth state max age cookie duration. Defaults to 60 seconds.
oauth_state_cookie_max_age = <%= oauth_state_cookie_max_age %>
<% end %>

<% if_p('grafana.auth.api_key_max_seconds_to_live') do |api_key_max_seconds_to_live| %>
# limit of api_key seconds to live before expiration
api_key_max_seconds_to_live = <%= api_key_max_seconds_to_live %>
<% end %>

<% if_p('grafana.auth.sigv4_auth_enabled') do |sigv4_auth_enabled| %>
# Set to true to enable SigV4 authentication option for HTTP-based datasources
sigv4_auth_enabled = <%= sigv4_auth_enabled %>
<% end %>

#################################### Anonymous Auth ##########################
[auth.anonymous]
<% if_p('grafana.auth.anonymous.enabled') do |enabled| %>
# enable anonymous access
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.anonymous.org_name') do |org_name| %>
# specify organization name that should be used for unauthenticated users
org_name = <%= org_name %>
<% end %>

<% if_p('grafana.auth.anonymous.org_role') do |org_role| %>
# specify role for unauthenticated users
org_role = <%= org_role %>
<% end %>

<% if_p('grafana.auth.anonymous.hide_version') do |hide_version| %>
# mask the Grafana version number for unauthenticated users
hide_version = <%= hide_version %>
<% end %>

#################################### Github Auth ##########################
[auth.github]
<% if_p('grafana.auth.github.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.github.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.github.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.github.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.github.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.github.auth_url') do |auth_url| %>
auth_url = <%= auth_url %>
<% end %>

<% if_p('grafana.auth.github.token_url') do |token_url| %>
token_url = <%= token_url %>
<% end %>

<% if_p('grafana.auth.github.api_url') do |api_url| %>
api_url = <%= api_url %>
<% end %>

<% if_p('grafana.auth.github.allowed_domains') do |allowed_domains| %>
allowed_domains = <%= allowed_domains %>
<% end %>

<% if_p('grafana.auth.github.team_ids') do |team_ids| %>
team_ids = <%= team_ids %>
<% end %>

<% if_p('grafana.auth.github.allowed_organizations') do |allowed_organizations| %>
allowed_organizations = <%= allowed_organizations %>
<% end %>

#################################### GitLab Auth #########################
[auth.gitlab]
<% if_p('grafana.auth.gitlab.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.gitlab.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.gitlab.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.gitlab.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.gitlab.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.gitlab.auth_url') do |auth_url| %>
auth_url = <%= auth_url %>
<% end %>

<% if_p('grafana.auth.gitlab.token_url') do |token_url| %>
token_url = <%= token_url %>
<% end %>

<% if_p('grafana.auth.gitlab.api_url') do |api_url| %>
api_url = <%= api_url %>
<% end %>

<% if_p('grafana.auth.gitlab.allowed_domains') do |allowed_domains| %>
allowed_domains = <%= allowed_domains %>
<% end %>

<% if_p('grafana.auth.gitlab.allowed_groups') do |allowed_groups| %>
allowed_groups = <%= allowed_groups %>
<% end %>

#################################### Google Auth ##########################
[auth.google]
<% if_p('grafana.auth.google.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.google.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.google.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.google.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.google.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.google.auth_url') do |auth_url| %>
auth_url = <%= auth_url %>
<% end %>

<% if_p('grafana.auth.google.token_url') do |token_url| %>
token_url = <%= token_url %>
<% end %>

<% if_p('grafana.auth.google.api_url') do |api_url| %>
api_url = <%= api_url %>
<% end %>

<% if_p('grafana.auth.google.allowed_domains') do |allowed_domains| %>
allowed_domains = <%= allowed_domains %>
<% end %>

<% if_p('grafana.auth.google.hosted_domain') do |hosted_domain| %>
hosted_domain = <%= hosted_domain %>
<% end %>

#################################### Grafana.net Auth ####################
[auth.grafananet]
<% if_p('grafana.auth.grafananet.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.grafananet.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.grafananet.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.grafananet.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.grafananet.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.grafananet.allowed_organizations') do |allowed_organizations| %>
allowed_organizations = <%= allowed_organizations %>
<% end %>

#################################### Grafana.com Auth ####################
[auth.grafana_com]
<% if_p('grafana.auth.grafanacom.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.grafanacom.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.grafanacom.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.grafanacom.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.grafanacom.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.grafanacom.allowed_organizations') do |allowed_organizations| %>
allowed_organizations = <%= allowed_organizations %>
<% end %>

#################################### Azure AD OAuth #######################
[auth.azuread]
<% if_p('grafana.auth.azuread.name') do |name| %>
name = <%= name %>
<% end %>

<% if_p('grafana.auth.azuread.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.azuread.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.azuread.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.azuread.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.azuread.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.azuread.auth_url') do |auth_url| %>
auth_url = <%= auth_url %>
<% end %>

<% if_p('grafana.auth.azuread.token_url') do |token_url| %>
token_url = <%= token_url %>
<% end %>

<% if_p('grafana.auth.azuread.allowed_domains') do |allowed_domains| %>
allowed_domains = <%= allowed_domains %>
<% end %>

<% if_p('grafana.auth.azuread.allowed_groups') do |allowed_groups| %>
allowed_groups = <%= allowed_groups %>
<% end %>

#################################### Okta OAuth #######################
[auth.okta]
<% if_p('grafana.auth.okta.name') do |name| %>
name = <%= name %>
<% end %>

<% if_p('grafana.auth.okta.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.okta.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.okta.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.okta.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.okta.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.okta.auth_url') do |auth_url| %>
auth_url = <%= auth_url %>
<% end %>

<% if_p('grafana.auth.okta.token_url') do |token_url| %>
token_url = <%= token_url %>
<% end %>

<% if_p('grafana.auth.okta.api_url') do |api_url| %>
api_url = <%= api_url %>
<% end %>

<% if_p('grafana.auth.okta.allowed_domains') do |allowed_domains| %>
allowed_domains = <%= allowed_domains %>
<% end %>

<% if_p('grafana.auth.okta.allowed_groups') do |allowed_groups| %>
allowed_groups = <%= allowed_groups %>
<% end %>

<% if_p('grafana.auth.okta.role_attribute_path') do |role_attribute_path| %>
role_attribute_path = <%= role_attribute_path %>
<% end %>

#################################### Generic OAuth ##########################
[auth.generic_oauth]
<% if_p('grafana.auth.generic_oauth.name') do |name| %>
name = <%= name %>
<% end %>

<% if_p('grafana.auth.generic_oauth.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.generic_oauth.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.generic_oauth.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.generic_oauth.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.generic_oauth.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.generic_oauth.email_attribute_name') do |email_attribute_name| %>
email_attribute_name = <%= email_attribute_name %>
<% end %>

<% if_p('grafana.auth.generic_oauth.email_attribute_path') do |email_attribute_path| %>
email_attribute_path = <%= email_attribute_path %>
<% end %>

<% if_p('grafana.auth.generic_oauth.login_attribute_path') do |login_attribute_path| %>
login_attribute_path = <%= login_attribute_path %>
<% end %>

<% if_p('grafana.auth.generic_oauth.name_attribute_path') do |name_attribute_path| %>
name_attribute_path = <%= name_attribute_path %>
<% end %>

<% if_p('grafana.auth.generic_oauth.role_attribute_path') do |role_attribute_path| %>
role_attribute_path = <%= role_attribute_path %>
<% end %>

<% if_p('grafana.auth.generic_oauth.id_token_attribute_name') do |id_token_attribute_name| %>
id_token_attribute_name = <%= id_token_attribute_name %>
<% end %>

<% if_p('grafana.auth.generic_oauth.auth_url') do |auth_url| %>
auth_url = <%= auth_url %>
<% end %>

<% if_p('grafana.auth.generic_oauth.token_url') do |token_url| %>
token_url = <%= token_url %>
<% end %>

<% if_p('grafana.auth.generic_oauth.api_url') do |api_url| %>
api_url = <%= api_url %>
<% end %>

<% if_p('grafana.auth.generic_oauth.allowed_domains') do |allowed_domains| %>
allowed_domains = <%= allowed_domains %>
<% end %>

<% if_p('grafana.auth.generic_oauth.team_ids') do |team_ids| %>
team_ids = <%= team_ids %>
<% end %>

<% if_p('grafana.auth.generic_oauth.allowed_organizations') do |allowed_organizations| %>
allowed_organizations = <%= allowed_organizations %>
<% end %>

<% if_p('grafana.auth.generic_oauth.tls_client_ca') do %>
tls_client_ca = /var/vcap/jobs/grafana/config/generic_oauth_tls_client_ca.pem
<% end %>

<% if_p('grafana.auth.generic_oauth.tls_client_cert', 'grafana.auth.generic_oauth.tls_client_key') do %>
tls_client_cert = /var/vcap/jobs/grafana/config/generic_oauth_tls_client_cert.pem
tls_client_key = /var/vcap/jobs/grafana/config/generic_oauth_tls_client_key.pem
<% end %>

<% if_p('grafana.auth.generic_oauth.tls_skip_verify_insecure') do |tls_skip_verify_insecure| %>
tls_skip_verify_insecure = <%= tls_skip_verify_insecure %>
<% end %>

#################################### SAML Auth ###########################
[auth.saml] # Enterprise only
<% if_p('grafana.auth.saml.enabled') do |enabled| %>
# Defaults to false. If true, the feature is enabled
enabled =  <%= enabled %>
<% end %>

<% if_p('grafana.auth.saml.certificate') do %>
# Path to the public X.509 certificate. Used to sign requests to the IdP
certificate_path = /var/vcap/jobs/grafana/config/saml_certificate.pem
<% end %>

<% if_p('grafana.auth.saml.private_key') do %>
# Path to the private key. Used to decrypt assertions from the IdP
private_key_path =  /var/vcap/jobs/grafana/config/saml_private_key.pem
<% end %>

<% if_p('grafana.auth.saml.idp_metadata') do %>
# Path to the SAML metadata XML. Used to verify and obtain binding locations from the IdP
idp_metadata_path = /var/vcap/jobs/grafana/config/saml_ipd_metadata.xml
<% end %>

<% if_p('grafana.auth.saml.idp_metadata_url') do |idp_metadata_url| %>
# URL to fetch SAML IdP metadata. Used to verify and obtain binding locations from the IdP
idp_metadata_url = <%= idp_metadata_url %>
<% end %>

<% if_p('grafana.auth.saml.max_issue_delay') do |max_issue_delay| %>
# Duration, since the IdP issued a response and the SP is allowed to process it. Defaults to 90 seconds
max_issue_delay = <%= max_issue_delay %>
<% end %>

<% if_p('grafana.auth.saml.metadata_valid_duration') do |metadata_valid_duration| %>
# Duration, for how long the SP's metadata should be valid. Defaults to 48 hours
metadata_valid_duration = <%= metadata_valid_duration %>
<% end %>

<% if_p('grafana.auth.saml.assertion_attribute_name') do |assertion_attribute_name| %>
# Friendly name or name of the attribute within the SAML assertion to use as the user's name
assertion_attribute_name = <%= assertion_attribute_name %>
<% end %>

<% if_p('grafana.auth.saml.assertion_attribute_login') do |assertion_attribute_login| %>
# Friendly name or name of the attribute within the SAML assertion to use as the user's login handle
assertion_attribute_login = <%= assertion_attribute_login %>
<% end %>

<% if_p('grafana.auth.saml.assertion_attribute_email') do |assertion_attribute_email| %>
# Friendly name or name of the attribute within the SAML assertion to use as the user's email
assertion_attribute_email = <%= assertion_attribute_email %>
<% end %>

#################################### Basic Auth ##########################
[auth.basic]
<% if_p('grafana.auth.basic.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

#################################### Auth Proxy ##########################
[auth.proxy]
<% if_p('grafana.auth.proxy.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.proxy.header_name') do |header_name| %>
header_name = <%= header_name %>
<% end %>

<% if_p('grafana.auth.proxy.header_property') do |header_property| %>
header_property = <%= header_property %>
<% end %>

<% if_p('grafana.auth.proxy.auto_sign_up') do |auto_sign_up| %>
auto_sign_up = <%= auto_sign_up %>
<% end %>

<% if_p('grafana.auth.proxy.sync_ttl') do |sync_ttl| %>
sync_ttl = <%= sync_ttl %>
<% end %>

<% if_p('grafana.auth.proxy.whitelist') do |whitelist| %>
whitelist = <%= whitelist %>
<% end %>

<% if_p('grafana.auth.proxy.headers') do |headers| %>
headers = <%= headers %>
<% end %>

<% if_p('grafana.auth.proxy.enable_login_token') do |enable_login_token| %>
enable_login_token = <%= enable_login_token %>
<% end %>

#################################### Auth LDAP ##########################
[auth.ldap]
<% if_p('grafana.auth.ldap.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.ldap.config') do %>
config_file = /var/vcap/jobs/grafana/config/ldap.toml
<% end %>

<% if_p('grafana.auth.ldap.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

# LDAP backround sync (Enterprise only)
<% if_p('grafana.auth.ldap.sync_cron') do |sync_cron| %>
sync_cron = <%= sync_cron %>
<% end %>

<% if_p('grafana.auth.ldap.active_sync_enabled') do |active_sync_enabled| %>
active_sync_enabled = <%= active_sync_enabled %>
<% end %>

#################################### SMTP / Emailing ##########################
[smtp]
<% if_p('grafana.smtp.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.smtp.host') do |host| %>
host = <%= host %>
<% end %>

<% if_p('grafana.smtp.user') do |user| %>
user = <%= user %>
<% end %>

<% if_p('grafana.smtp.password') do |password| %>
password = <%= password %>
<% end %>

<% if_p('grafana.smtp.ssl_cert') do %>
cert_file = /var/vcap/jobs/grafana/config/smtp_cert.pem
<% end %>

<% if_p('grafana.smtp.ssl_key') do %>
key_file = /var/vcap/jobs/grafana/config/smtp_key.pem
<% end %>

<% if_p('grafana.smtp.skip_verify') do |skip_verify| %>
skip_verify = <%= skip_verify %>
<% end %>

<% if_p('grafana.smtp.from_address') do |from_address| %>
from_address = <%= from_address %>
<% end %>

<% if_p('grafana.smtp.from_name') do |from_name| %>
from_name = <%= from_name %>
<% end %>

<% if_p('grafana.smtp.ehlo_identity') do |ehlo_identity| %>
ehlo_identity = <%= ehlo_identity %>
<% end %>

<% if_p('grafana.smtp.starttls_policy') do |starttls_policy| %>
startTLS_policy = <%= starttls_policy %>
<% end %>

[emails]
<% if_p('grafana.emails.welcome_email_on_sign_up') do |welcome_email_on_sign_up| %>
welcome_email_on_sign_up = <%= welcome_email_on_sign_up %>
<% end %>

#################################### Logging ##########################
[log]
<% if_p('grafana.log.mode') do |mode| %>
# Either "console", "file", "syslog". Default is console and file
# Use space to separate multiple modes, e.g. "console file"
mode = <%= mode %>
<% end %>

<% if_p('grafana.log.level') do |level| %>
# Either "trace", "debug", "info", "warn", "error", "critical", default is "info"
level = <%= level %>
<% end %>

<% if_p('grafana.log.filters') do |filters| %>
# optional settings to set different levels for specific loggers. Ex filters = sqlstore:debug
filters = <%= filters %>
<% end %>

# For "console" mode only
[log.console]
<% if_p('grafana.log.console.level') do |level| %>
level = <%= level %>
<% end %>

<% if_p('grafana.log.console.format') do |format| %>
# log line format, valid options are text, console and json
format = <%= format %>
<% end %>

# For "file" mode only
[log.file]
<% if_p('grafana.log.file.level') do |level| %>
level = <%= level %>
<% end %>

<% if_p('grafana.log.file.format') do |format| %>
# log line format, valid options are text, console and json
format = <%= format %>
<% end %>

<% if_p('grafana.log.file.log_rotate') do |log_rotate| %>
# This enables automated log rotate(switch of following options), default is true
log_rotate = <%= log_rotate %>
<% end %>

<% if_p('grafana.log.file.max_lines') do |max_lines| %>
# Max line number of single file, default is 1000000
max_lines = <%= max_lines %>
<% end %>

<% if_p('grafana.log.file.max_size_shift') do |max_size_shift| %>
# Max size shift of single file, default is 28 means 1 << 28, 256MB
max_size_shift = <%= max_size_shift %>
<% end %>

<% if_p('grafana.log.file.daily_rotate') do |daily_rotate| %>
# Segment log daily, default is true
daily_rotate = <%= daily_rotate %>
<% end %>

<% if_p('grafana.log.file.max_days') do |max_days| %>
# Expired days of log file(delete after max days), default is 7
max_days = <%= max_days %>
<% end %>

# For "syslog" mode only
[log.syslog]
<% if_p('grafana.log.syslog.level') do |level| %>
level = <%= level %>
<% end %>

<% if_p('grafana.log.syslog.format') do |format| %>
# log line format, valid options are text, console and json
format = <%= format %>
<% end %>

<% if_p('grafana.log.syslog.network', 'grafana.log.syslog.address') do |network, address| %>
# Syslog network type and address. This can be udp, tcp, or unix. If left blank, the default unix endpoints will be used.
network = <%= network %>
address = <%= address %>
<% end %>

<% if_p('grafana.log.syslog.facility') do |facility| %>
# Syslog facility. user, daemon and local0 through local7 are valid.
facility = <%= facility %>
<% end %>

<% if_p('grafana.log.syslog.tag') do |tag| %>
# Syslog tag. By default, the process' argv[0] is used.
tag = <%= tag %>
<% end %>

#################################### Usage Quotas ########################
[quota]
<% if_p('grafana.quota.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

#### set quotas to -1 to make unlimited. ####

<% if_p('grafana.quota.org_user') do |org_user| %>
# limit number of users per Org.
org_user = <%= org_user %>
<% end %>

<% if_p('grafana.quota.org_dashboard') do |org_dashboard| %>
# limit number of dashboards per Org.
org_dashboard = <%= org_dashboard %>
<% end %>

<% if_p('grafana.quota.org_data_source') do |org_data_source| %>
# limit number of data_sources per Org.
org_data_source = <%= org_data_source %>
<% end %>

<% if_p('grafana.quota.org_api_key') do |org_api_key| %>
# limit number of api_keys per Org.
org_api_key = <%= org_api_key %>
<% end %>

<% if_p('grafana.quota.user_org') do |user_org| %>
# limit number of orgs a user can create.
user_org = <%= user_org %>
<% end %>

<% if_p('grafana.quota.global_user') do |global_user| %>
# Global limit of users.
global_user = <%= global_user %>
<% end %>

<% if_p('grafana.quota.global_org') do |global_org| %>
# global limit of orgs.
global_org = <%= global_org %>
<% end %>

<% if_p('grafana.quota.global_dashboard') do |global_dashboard| %>
# global limit of dashboards
global_dashboard = <%= global_dashboard %>
<% end %>

<% if_p('grafana.quota.global_api_key') do |global_api_key| %>
# global limit of api_keys
global_api_key = <%= global_api_key %>
<% end %>

<% if_p('grafana.quota.global_session') do |global_session| %>
# global limit on number of logged in users.
global_session = <%= global_session %>
<% end %>

#################################### Alerting ######################################
[alerting]
<% if_p('grafana.alerting.enabled') do |enabled| %>
# Disable alerting engine & UI features
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.alerting.execute_alerts') do |execute_alerts| %>
# Makes it possible to turn off alert rule execution.
execute_alerts = <%= execute_alerts %>
<% end %>

<% if_p('grafana.alerting.error_or_timeout') do |error_or_timeout| %>
# Default setting for new alert rules. Defaults to categorize error and timeouts as alerting. (alerting, keep_state)
error_or_timeout = <%= error_or_timeout %>
<% end %>

<% if_p('grafana.alerting.nodata_or_nullvalues') do |nodata_or_nullvalues| %>
# Default setting for how Grafana handles nodata or null values in alerting. (alerting, no_data, keep_state, ok)
nodata_or_nullvalues = <%= nodata_or_nullvalues %>
<% end %>

<% if_p('grafana.alerting.concurrent_render_limit') do |concurrent_render_limit| %>
# Alert notifications can include images, but rendering many images at the same time can overload the server
# This limit will protect the server from render overloading and make sure notifications are sent out quickly
concurrent_render_limit = <%= concurrent_render_limit %>
<% end %>

<% if_p('grafana.alerting.evaluation_timeout_seconds') do |evaluation_timeout_seconds| %>
# Default setting for alert calculation timeout. Default value is 30
evaluation_timeout_seconds = <%= evaluation_timeout_seconds %>
<% end %>

<% if_p('grafana.alerting.notification_timeout_seconds') do |notification_timeout_seconds| %>
# Default setting for alert notification timeout. Default value is 30
notification_timeout_seconds = <%= notification_timeout_seconds %>
<% end %>

<% if_p('grafana.alerting.max_attempts') do |max_attempts| %>
# Default setting for max attempts to sending alert notifications. Default value is 3
max_attempts = <%= max_attempts %>
<% end %>

<% if_p('grafana.alerting.min_interval_seconds') do |min_interval_seconds| %>
# Makes it possible to enforce a minimal interval between evaluations, to reduce load on the backend
min_interval_seconds = <%= min_interval_seconds %>
<% end %>

<% if_p('grafana.alerting.max_annotation_age') do |max_annotation_age| %>
# Configures for how long alert annotations are stored. Default is 0, which keeps them forever.
# This setting should be expressed as an duration. Ex 6h (hours), 10d (days), 2w (weeks), 1M (month).
max_annotation_age = <%= max_annotation_age %>
<% end %>

<% if_p('grafana.alerting.max_annotations_to_keep') do |max_annotations_to_keep| %>
# Configures max number of alert annotations that Grafana stores. Default value is 0, which keeps all alert annotations.
max_annotations_to_keep = <%= max_annotations_to_keep %>
<% end %>

#################################### Annotations #########################

[annotations.dashboard]
# Dashboard annotations means that annotations are associated with the dashboard they are created on.

<% if_p('grafana.annotations.dashboard.max_age') do |max_age| %>
# Configures how long dashboard annotations are stored. Default is 0, which keeps them forever.
# This setting should be expressed as a duration. Examples: 6h (hours), 10d (days), 2w (weeks), 1M (month).
max_age = <%= max_age %>
<% end %>

<% if_p('grafana.annotations.dashboard.max_annotations_to_keep') do |max_annotations_to_keep| %>
# Configures max number of dashboard annotations that Grafana stores. Default value is 0, which keeps all dashboard annotations.
max_annotations_to_keep = <%= max_annotations_to_keep %>
<% end %>

[annotations.api]
# API annotations means that the annotations have been created using the API without any
# association with a dashboard.

<% if_p('grafana.annotations.api.max_age') do |max_age| %>
# Configures how long Grafana stores API annotations. Default is 0, which keeps them forever.
# This setting should be expressed as a duration. Examples: 6h (hours), 10d (days), 2w (weeks), 1M (month).
max_age = <%= max_age %>
<% end %>

<% if_p('grafana.annotations.api.max_annotations_to_keep') do |max_annotations_to_keep| %>
# Configures max number of API annotations that Grafana keeps. Default value is 0, which keeps all API annotations.
max_annotations_to_keep = <%= max_annotations_to_keep %>
<% end %>

#################################### Explore #############################
[explore]
<% if_p('grafana.explore.enabled') do |enabled| %>
# Enable the Explore section
enabled = <%= enabled %>
<% end %>

#################################### Internal Grafana Metrics ##########################
# Metrics available at HTTP API Url /api/metrics
[metrics]
<% if_p('grafana.metrics.enabled') do |enabled| %>
# Disable / Enable internal metrics
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.metrics.interval_seconds') do |interval_seconds| %>
# Publish interval
interval_seconds = <%= interval_seconds %>
<% end %>

<% if_p('grafana.metrics.disable_total_stats') do |disable_total_stats| %>
# Disable total stats (stat_totals_*) metrics to be generated
disable_total_stats = <%= disable_total_stats %>
<% end %>

<% if_p('grafana.metrics.basic_auth.username', 'grafana.metrics.basic_auth.password') do |basic_auth_username, basic_auth_password| %>
# If both are set, basic auth will be required for the metrics endpoint.
basic_auth_username = <%= basic_auth_username %>
basic_auth_password = <%= basic_auth_password %>
<% end %>

# Send internal metrics to Graphite
[metrics.graphite]
<% if_p('grafana.metrics.graphite.address') do |address| %>
address = <%= address %>
<% end %>

<% if_p('grafana.metrics.graphite.prefix') do |prefix| %>
prefix = <%= prefix %>
<% end %>

#################################### Grafana.com integration  ##########################

[grafana_net]
<% if_p('grafana.grafana_net.url') do |url| %>
url = <%= url %>
<% end %>

[grafana_com]
<% if_p('grafana.grafana_com.url') do |url| %>
url = <%= url %>
<% end %>

#################################### Distributed tracing ############
[tracing.jaeger]
<% if_p('grafana.tracing.jaeger.address') do |address| %>
# jaeger destination (ex localhost:6831)
address = <%= address %>
<% end %>

<% if_p('grafana.tracing.jaeger.always_included_tag') do |always_included_tag| %>
# tag that will always be included in when creating new spans. ex (tag1:value1,tag2:value2)
always_included_tag = <%= always_included_tag %>
<% end %>

<% if_p('grafana.tracing.jaeger.sampler_type') do |sampler_type| %>
# Type specifies the type of the sampler: const, probabilistic, rateLimiting, or remote
sampler_type = <%= sampler_type %>
<% end %>

<% if_p('grafana.tracing.jaeger.sampler_param') do |sampler_param| %>
# jaeger samplerconfig param
# for "const" sampler, 0 or 1 for always false/true respectively
# for "probabilistic" sampler, a probability between 0 and 1
# for "rateLimiting" sampler, the number of spans per second
# for "remote" sampler, param is the same as for "probabilistic"
# and indicates the initial sampling rate before the actual one
# is received from the mothership
sampler_param = <%= sampler_param %>
<% end %>

<% if_p('grafana.tracing.jaeger.zipkin_propagation') do |zipkin_propagation| %>
# Whether or not to use Zipkin span propagation (x-b3- HTTP headers).
zipkin_propagation = <%= zipkin_propagation %>
<% end %>

<% if_p('grafana.tracing.jaeger.disable_shared_zipkin_spans') do |disable_shared_zipkin_spans| %>
# Setting this to true disables shared RPC spans.
# Not disabling is the most common setting when using Zipkin elsewhere in your infrastructure.
disable_shared_zipkin_spans = <%= disable_shared_zipkin_spans %>
<% end %>

#################################### External image storage ##########################
[external_image_storage]
<% if_p('grafana.external_image_storage.provider') do |provider| %>
# Used for uploading images to public servers so they can be included in slack/email messages.
# you can choose between (s3, webdav, gcs, azure_blob, local)
provider = <%= provider %>
<% end %>

<% if_p('grafana.external_image_storage.s3.access_key', 'grafana.external_image_storage.s3.secret_key') do |access_key, secret_key| %>
[external_image_storage.s3]
access_key = <%= access_key %>
secret_key = <%= secret_key %>
<% if_p('grafana.external_image_storage.s3.bucket_url') do |bucket_url| %>
bucket_url = <%= bucket_url %>
<% end %>
<% if_p('grafana.external_image_storage.s3.bucket') do |bucket| %>
bucket = <%= bucket %>
<% end %>
<% if_p('grafana.external_image_storage.s3.region') do |region| %>
region = <%= region %>
<% end %>
<% if_p('grafana.external_image_storage.s3.path') do |path| %>
path = <%= path %>
<% end %>
<% if_p('grafana.external_image_storage.s3.endpoint') do |endpoint| %>
endpoint = <%= endpoint %>
<% end %>
<% if_p('grafana.external_image_storage.s3.path_style_access') do |path_style_access| %>
path_style_access = <%= path_style_access %>
<% end %>
<% end %>

<% if_p('grafana.external_image_storage.webdav.url', 'grafana.external_image_storage.webdav.username', 'grafana.external_image_storage.webdav.password') do |url, username, password| %>
[external_image_storage.webdav]
url = <%= url %>
username = <%= username %>
password = <%= provider %>
<% if_p('grafana.external_image_storage.webdav.public_url') do |public_url| %>
public_url = <%= public_url %>
<% end %>
<% end %>

<% if_p('grafana.external_image_storage.gcs.json_key', 'grafana.external_image_storage.gcs.bucket') do |json_key, bucket| %>
[external_image_storage.gcs]
key_file = /var/vcap/jobs/grafana/config/gcs_key.json
bucket = <%= bucket %>
<% if_p('grafana.external_image_storage.gcs.path') do |path| %>
path = <%= path %>
<% end %>
<% end %>

[external_image_storage.azure_blob]
<% if_p('grafana.external_image_storage.azure.account_name', 'grafana.external_image_storage.azure.account_key', 'grafana.external_image_storage.azure.container_name') do |account_name, account_key, container_name| %>
account_name = <%= account_name %>
account_key = <%= account_key %>
container_name = <%= container_name %>
<% end %>

[external_image_storage.local]
# does not require any configuration

[rendering]
# Options to configure external image rendering server like https://github.com/grafana/grafana-image-renderer
<% if_p('grafana.rendering.server_url') do |server_url| %>
# URL to a remote HTTP image renderer service, e.g. http://localhost:8081/render, will enable Grafana to render panels and dashboards to PNG-images using HTTP requests to an external service.
server_url = <%= server_url %>
<% end %>

<% if_p('grafana.rendering.callback_url') do |callback_url| %>
# If the remote HTTP image renderer service runs on a different server than the Grafana server you may have to configure this to a URL where Grafana is reachable, e.g. http://grafana.domain/.
callback_url = <%= callback_url %>
<% end %>

<% if_p('grafana.rendering.concurrent_render_request_limit') do |concurrent_render_request_limit| %>
# Concurrent render request limit affects when the /render HTTP endpoint is used. Rendering many images at the same time can overload the server,
# which this setting can help protect against by only allowing a certain amount of concurrent requests.
concurrent_render_request_limit = <%= concurrent_render_request_limit %>
<% end %>

[panels]
<% if_p('grafana.panels.enable_alpha') do |enable_alpha| %>
enable_alpha = <%= enable_alpha %>
<% end %>

<% if_p('grafana.panels.disable_sanitize_html') do |disable_sanitize_html| %>
disable_sanitize_html = <%= disable_sanitize_html %>
<% end %>

[plugins]
<% if_p('grafana.plugins.enable_alpha') do |enable_alpha| %>
enable_alpha = <%= enable_alpha %>
<% end %>

<% if_p('grafana.plugins.app_tls_skip_verify_insecure') do |app_tls_skip_verify_insecure| %>
app_tls_skip_verify_insecure = <%= app_tls_skip_verify_insecure %>
<% end %>

<% if_p('grafana.plugins.allow_loading_unsigned_plugins') do |allow_loading_unsigned_plugins| %>
allow_loading_unsigned_plugins = <%= allow_loading_unsigned_plugins %>
<% end %>

<% if_p('grafana.plugins.marketplace_url') do |marketplace_url| %>
marketplace_url = <%= marketplace_url %>
<% end %>

#################################### Grafana Image Renderer Plugin ##########################
[plugin.grafana-image-renderer]
<% if_p('grafana.plugin.grafana_image_renderer.rendering_timezone') do |rendering_timezone| %>
# Instruct headless browser instance to use a default timezone when not provided by Grafana, e.g. when rendering panel image of alert.
# See ICUâ€™s metaZones.txt (https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt) for a list of supported
# timezone IDs. Fallbacks to TZ environment variable if not set.
rendering_timezone = <%= rendering_timezone %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_language') do |rendering_language| %>
# Instruct headless browser instance to use a default language when not provided by Grafana, e.g. when rendering panel image of alert.
# Please refer to the HTTP header Accept-Language to understand how to format this value, e.g. 'fr-CH, fr;q=0.9, en;q=0.8, de;q=0.7, *;q=0.5'.
rendering_language = <%= rendering_language %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_viewport_device_scale_factor') do |rendering_viewport_device_scale_factor| %>
# Instruct headless browser instance to use a default device scale factor when not provided by Grafana, e.g. when rendering panel image of alert.
# Default is 1. Using a higher value will produce more detailed images (higher DPI), but will require more disk space to store an image.
rendering_viewport_device_scale_factor = <%= rendering_viewport_device_scale_factor %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_ignore_https_errors') do |rendering_ignore_https_errors| %>
# Instruct headless browser instance whether to ignore HTTPS errors during navigation. Per default HTTPS errors are not ignored. Due to
# the security risk it's not recommended to ignore HTTPS errors.
rendering_ignore_https_errors = <%= rendering_ignore_https_errors %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_verbose_logging') do |rendering_verbose_logging| %>
# Instruct headless browser instance whether to capture and log verbose information when rendering an image. Default is false and will
# only capture and log error messages. When enabled, debug messages are captured and logged as well.
# For the verbose information to be included in the Grafana server log you have to adjust the rendering log level to debug, configure
# [log].filter = rendering:debug.
rendering_verbose_logging = <%= rendering_verbose_logging %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_dumpio') do |rendering_dumpio| %>
# Instruct headless browser instance whether to output its debug and error messages into running process of remote rendering service.
# Default is false. This can be useful to enable (true) when troubleshooting.
rendering_dumpio = <%= rendering_dumpio %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_args') do |rendering_args| %>
# Additional arguments to pass to the headless browser instance. Default is --no-sandbox. The list of Chromium flags can be found
# here (https://peter.sh/experiments/chromium-command-line-switches/). Multiple arguments is separated with comma-character.
rendering_args = <%= rendering_args %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_chrome_bin') do |rendering_chrome_bin| %>
# You can configure the plugin to use a different browser binary instead of the pre-packaged version of Chromium.
# Please note that this is not recommended, since you may encounter problems if the installed version of Chrome/Chromium is not
# compatible with the plugin.
rendering_chrome_bin = <%= rendering_chrome_bin %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_mode') do |rendering_mode| %>
# Instruct how headless browser instances are created. Default is 'default' and will create a new browser instance on each request.
# Mode 'clustered' will make sure that only a maximum of browsers/incognito pages can execute concurrently.
# Mode 'reusable' will have one browser instance and will create a new incognito page on each request.
rendering_mode = <%= rendering_mode %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_clustering_mode') do |rendering_clustering_mode| %>
# When rendering_mode = clustered you can instruct how many browsers or incognito pages can execute concurrently. Default is 'browser'
# and will cluster using browser instances.
# Mode 'context' will cluster using incognito pages.
rendering_clustering_mode = <%= rendering_clustering_mode %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_clustering_max_concurrency') do |rendering_clustering_max_concurrency| %>
# When rendering_mode = clustered you can define maximum number of browser instances/incognito pages that can execute concurrently..
rendering_clustering_max_concurrency = <%= rendering_clustering_max_concurrency %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_viewport_max_width') do |rendering_viewport_max_width| %>
# Limit the maximum viewport width that can be requested.
rendering_viewport_max_width = <%= rendering_viewport_max_width %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_viewport_max_height') do |rendering_viewport_max_height| %>
# Limit the maximum viewport height that can be requested.
rendering_viewport_max_height = <%= rendering_viewport_max_height %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_viewport_max_device_scale_factor') do |rendering_viewport_max_device_scale_factor| %>
# Limit the maximum viewport device scale factor that can be requested.
rendering_viewport_max_device_scale_factor = <%= rendering_viewport_max_device_scale_factor %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.grpc_host') do |grpc_host| %>
# Change the listening host of the gRPC server. Default host is 127.0.0.1.
grpc_host = <%= grpc_host %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.grpc_port') do |grpc_port| %>
# Change the listening port of the gRPC server. Default  default port is 0 and will automatically assign a port not in use.
grpc_port = <%= grpc_port %>
<% end %>

[enterprise]
<% if_p('grafana.enterprise.license') do %>
license_path = /var/vcap/jobs/grafana/config/license.jwt
<% end %>

[feature_toggles]
<% if_p('grafana.feature_toggles.enable') do |enable| %>
# enable features, separated by spaces
enable = <%= enable %>
<% end %>

[date_formats]
# For information on what formatting patterns that are supported https://momentjs.com/docs/#/displaying/

<% if_p('grafana.date_formats.full_date') do |full_date| %>
# Default system date format used in time range picker and other places where full time is displayed
full_date = <%= full_date %>
<% end %>

# Used by graph and other places where we only show small intervals
<% if_p('grafana.date_formats.interval_second') do |interval_second| %>
interval_second = <%= interval_second %>
<% end %>

<% if_p('grafana.date_formats.interval_minute') do |interval_minute| %>
interval_minute = <%= interval_minute %>
<% end %>

<% if_p('grafana.date_formats.interval_hour') do |interval_hour| %>
interval_hour = <%= interval_hour %>
<% end %>

<% if_p('grafana.date_formats.interval_day') do |interval_day| %>
interval_day = <%= interval_day %>
<% end %>

<% if_p('grafana.date_formats.interval_month') do |interval_month| %>
interval_month = <%= interval_month %>
<% end %>

<% if_p('grafana.date_formats.interval_year') do |interval_year| %>
interval_year = <%= interval_year %>
<% end %>

<% if_p('grafana.date_formats.use_browser_locale') do |use_browser_locale| %>
# Experimental feature
use_browser_locale = <%= use_browser_locale %>
<% end %>

<% if_p('grafana.date_formats.default_timezone') do |default_timezone| %>
# Default timezone for user preferences. Options are 'browser' for the browser local timezone or a timezone name from IANA Time Zone database, e.g. 'UTC' or 'Europe/Amsterdam' etc.
default_timezone = <%= default_timezone %>
<% end %>
